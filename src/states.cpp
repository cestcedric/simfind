#include "../include/states.h"

#include <iostream>
#include <math.h>
#include <random>

States::States() {
}

// s = path to simulation result
// rank = number of iteration steps taken before this state + 1
void States::save(std::string from, std::string to, int rank) {

	//read from .sto generated by opensim
	std::ifstream in;
	in.open(from);

	std::vector<std::string> lines(8);
	std::string last;

	std::getline(in, lines[0]);//name of state
	std::getline(in, lines[1]);//version = 1
	std::getline(in, lines[2]);//nRows, will contain rank when printed
	std::getline(in, lines[3]);//ncolumns
	std::getline(in, lines[4]);//in degrees
	std::getline(in, lines[5]);//end header
	std::getline(in, lines[6]);//column names
	while (std::getline(in, last)) {
		lines[7] = last;//values in last line
	}
	in.close();

	//set time to 0
	lines[7].erase(0, 27);

	//write to new file
	std::ofstream out;
	out.open(to);

	out << lines[0] << std::endl;
	out << lines[1] << std::endl;
	out << "nRows=" << rank << std::endl;
	out << lines[3] << std::endl;
	out << lines[4] << std::endl;
	out << lines[5] << std::endl;
	out << lines[6] << std::endl;
	out << lines[7] << std::endl;

	out.close();
	
}

int States::getRank(std::string s) {
	std::ifstream in;
	in.open(s);

	std::string line;

	std::getline(in, line);//name of state
	std::getline(in, line);//version = 1
	std::getline(in, line);//nRows = rank

	int rank = std::stoi(line.substr(6, line.size() - 6));

	in.close();

	return rank;
}

std::vector<double> States::getAngles(std::string s) {
	std::vector<double> angles(7);

	std::ifstream in;
	in.open(s);

	std::string line;

	//get last line
	for (int i = 0; i < 8; i++) {
		std::getline(in, line);
	}

	//get setable values
	int p;

	//skip first 12 values, time has no ".", so skip 11 dots
	for (int i = 0; i < 11; i++) {
		p = line.find(".");
		line.erase(0, p + 21);
	}

	//elv_angle
	p = line.find(".");
	angles[0] = std::stod(line.substr(p - 2, p + 21));
	line.erase(0, p + 21);

	//shoulder_elv
	p = line.find(".");
	angles[1] = std::stod(line.substr(p - 2, p + 21));
	line.erase(0, p + 21);

	//skip 1 value
	p = line.find(".");
	line.erase(0, p + 21);

	//shoulder_rot
	p = line.find(".");
	angles[2] = std::stod(line.substr(p - 2, p + 21));
	line.erase(0, p + 21);

	//elbow_flexion
	p = line.find(".");
	angles[3] = std::stod(line.substr(p - 2, p + 21));
	line.erase(0, p + 21);

	//pro_sup
	p = line.find(".");
	angles[4] = std::stod(line.substr(p - 2, p + 21));
	line.erase(0, p + 21);

	//deviation
	p = line.find(".");
	angles[5] = std::stod(line.substr(p - 2, p + 21));
	line.erase(0, p + 21);

	//flexion
	p = line.find(".");
	angles[6] = std::stod(line.substr(p - 2, p + 21));
	line.erase(0, p + 21);

	in.close();

	return angles;
}